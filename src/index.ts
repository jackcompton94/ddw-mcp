import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";

const API_KEY = `Bearer ${process.env.DW_AUTH_TOKEN}`;
const API_URL = "https://api.data.world/v0/sql/jcorg/2023-nfl-stats?includeTableSchema=false";

const compactSchema = `
Two tables are available:

- \`all_qb_stats\`: QB game stats — date, week, team, game_location, opp, result, team_pts, opp_pts, cmp, att, pass_yds, pass_td, int, rating, sacked, rush_td, qb
- \`all_team_stats\`: Team game stats — week, day, rest_days, home_team, distance_travelled, opp, result, points_for, points_allowed, tot_yds, pass_yds, rush_yds, opp_tot_yds, opp_pass_yds, opp_rush_yds, team`;

const server = new McpServer({
  name: "ddw-mcp",
  version: "1.0.0",
  capabilities: {
    tools: {},
    resources: {},
  },
});

server.tool(
  "query-nfl-stats",
  `Execute a SQL query against the 2023 NFL dataset.

You may use the following tables and columns:

${compactSchema}

Use this tool to run SQL that was generated based on a user's question.`,
  {
    query: z.string().describe("A SQL query to execute on the NFL data"),
  },
  async ({ query }) => {
    const response = await fetch(`${API_URL}&query=${encodeURIComponent(query)}`, {
      method: "GET",
      headers: {
        accept: "application/json",
        authorization: API_KEY,
      },
    });

    if (!response.ok) {
      const msg = await response.text();
      return {
        content: [
          {
            type: "text",
            text: `❌ Query failed:\n${msg}`,
          },
        ],
      };
    }
    
    const data = await response.json();
    
    if (!Array.isArray(data) || data.length === 0) {
      return {
        content: [
          {
            type: "text",
            text: `⚠️ No results found for this query.`,
          },
        ],
      };
    }
    
    return {
      content: [
        {
          type: "text",
          text: `✅ Query executed successfully.\n\n\n${JSON.stringify(data, null, 2)}\n`,
        },
      ],
    };    
  }
);

server.tool(
  "save-report",
  `Save a markdown report to data.world as an insight. This is useful for saving analysis or insights generated from user queries.`,
  {
    markdown: z.string().describe("The markdown content to save"),
    title: z.string().describe("The title of the insight (e.g., 'QB Stats Summary')"),
  },
  async ({ markdown, title }) => {
    const url = 'https://api.data.world/v0/insights/jcorg/2023-nfl-stats';

    const options = {
      method: 'POST',
      headers: {
        'Authorization': API_KEY,
        'Content-Type': 'application/json',
        'Accept': 'application/json',
      },
      body: JSON.stringify({
        body: {
          markdownBody: `> _This report was generated by Claude using the data.world MCP Server._\n\n${markdown}`
        },
        title,
      }),
    };

    try {
      const res = await fetch(url, options);
      const json = await res.json();
    
      if (!res.ok) {
        throw new Error(json.message || `Failed to create insight`);
      }
    
      return {
        content: [
          {
            type: "text",
            text: `✅ Insight saved successfully!\n${json.uri || '(no link returned)'}`,
          },
        ],
      };
    } catch (err) {
      return {
        content: [
          {
            type: "text",
            text: `❌ Error saving insight:\n${err}`,
          },
        ],
      };
    }    
  }
);

async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("DDW MCP Server running on stdio");
}

main().catch((err) => {
  console.error("Fatal error in main():", err);
  process.exit(1);
});
